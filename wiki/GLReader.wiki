#summary This page contains an overview of the Reader component of the GL Service.

= Introduction =

rename to GL String GL Reader?


The GL Service utilizes the {{{GlStringGlReader}}} to read a glstring and return an object and a URI.

In brief, the reader:
 * Checks whether the GL String has an ID by calling the glstringResolver and idResolver
 * Registers the GL String if the ID/object doesn't exist 
   * Recursively reads smaller and smaller pieces based on the [Delimiters delimiters], resolving and registering new objects along the way.   
 * Returns the object

= Details =

==Components==
The following classes are part of the GL Reader:
|| *Name* || *Function* || *Namespace* ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service/src/main/java/org/immunogenomics/gl/service/GlReader.java GlReader.java] || Interface || org.immunogenomics.gl.service.GlReader ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service/src/main/java/org/immunogenomics/gl/service/reader/GlstringGlReader.java GlStringGlReader.java] || GL String Implementation of GlReader || org.immunogenomics.gl.service.GlStringGlReader ||

The following classes are referenced by the GL Reader:

==How it Works==
===Resolving IDs===
The computation involved with resolving IDs is handled primarily by the [{{{glStringResolver}}}] and [{{{idResolver}}}]. 

The resolvers are called as follows:
{{{
final String id = glstringResolver.resolveLocus(glstring);
Locus locus = idResolver.findLocus(id);
}}}
where {{{Locus}}} is replaced by any [Datatypes datatype].

We'll leave the details about the Resolvers for a separate page, so let's just talk about what this means to the Reader.

 * If the glstring/ID already exists, its object is returned.
 * If the glstring/ID does not exist, it needs to be registered, but first we check to see if any of its components have already been registered by recursing.

===Recursive Reading===

Recursive reading happens/The reader recurses when the glstring and ID do not already exist in the cache, or when the resolver times out. 
Since each object [Datatypes contains a list of its components], we need to make sure that all of its components are also registered.

====Special cases:====

{{{Locus}}}
  Since the {{{locus}}} is the smallest possible datatype, the reader only has to make sure it is in a valid format before registering a new {{{locus}}}. In the future, it may be desirable to add additional validation to prevent creating loci that are not part of nomenclature.

{{{Alleles}}}
 Much like a {{{locus}}}, the reader has to make sure the {{{allele}}} is in a valid format before registering anything new. The {{{locus}}} is also verified. Because any new alleles registered with the GL Service are not necessarily in the [IMGT Database], they are not given an accession number and are  relates to the accession number. All alleles in [http://hla.alleles.org/ HLA Nomenclature] have an accession number

====All other cases:====

The GL String is split into components by its [Delimiters delimiters] in order of precedence. For example, the {{{MultilocusUnphasedGenotype}}} splits the string into {{{GenotypeLists}}} wherever there is a {{{^}}}. Continuing this example, the Reader calls 
{{{readGenotypeList(genotypeListPart;}}} <fixme need to add info>

===Registering Objects===