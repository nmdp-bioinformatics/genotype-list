#summary Webapp implementation of the URI-based RESTful service for the GL Service.
#labels Phase-Implementation

= Introduction =

The GL Service utilizes {{{Spark}}} as its webapp implementation of the URI-based RESTful service. 

In brief, the SparkGlService:
 * TODO writeme. include:
 * GET/POST
 * Does not implement all of the CRUD operations - no updating or deleting, externally- or internally-facing

= Details =

==Components==
The following classes are _part_ of Spark:
|| *Name* || *Function* ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/SparkGlService.java SparkGlService.java] || Webapp implementation of a URI-based RESTful service for the gl project using Spark. ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/SparkModule.java SparkModule.java] || Spark module. ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/NamespaceConfig.java NamespaceConfig.java] || Configures namespace related values- provides the base URL for the GL Service. ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/SparkGlServiceApplication.java SparkGlServiceApplication.java] || Wrapper for GL Service to allow Guice injection before initialization. ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/SparkJdbcGlServiceApplication.java SparkJdbcGlServiceApplication.java] || Wrapper for Spark GL Service with JDBC to allow Guice injection before initialization. ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/SparkJedisGlServiceApplication.java SparkJedisGlServiceApplication.java] || Wrapper for Spark GL Service with Redis/Jedis to allow Guice injection before initialization. ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service-spark/src/main/java/org/immunogenomics/gl/service/spark/SparkVoldemortGlServiceApplication.java SparkVoldemortGlServiceApplication.java] || Wrapper for Spark GL Service with Voldemort to allow Guice injection before initialization. ||


The following classes are _referenced_ by Spark:
|| *Name* || *Function* ||
|| [ GlReader] || Used in POST operations to parse and register GL Strings ||
|| [ IdResolver] || Used in GET operations to retrieve GLResources corresponding with IDs. ||
|| [ GlWriters] || Used in GET operations to write GLResources out to the desired format. ||

==How it Works==
===Initializing Spark===
Spark uses the following constructor:
{{{
SparkGlService(@Namespace final String ns, final GlReader glReader, final IdResolver idResolver, final Map<String, GlWriter> glWriters)
}}}
This allows for an easy change in the namespace, [GLReader GLReader], IdResolver, and GlWriter, based on implementation decisions.

Calling {{{spark.init();}}} initializes the post and get routes for each [GLResources GLResource], and loads the IMGT alleles.


===HTTP POST===
Each HTTP POST Route is based on the abstract HTTP POST Route defined in the Spark class.

[GLResources GL Resource]-specific HTTP POST Routes:
{{{
post(new PostRoute("/locus") {
        @Override
        protected GlResource readGlResource(final String value) throws IOException {
            return glReader.readLocus(value);
        }
    });
}}}

The abstract HTTP POST Route:
 * Replaces the "/" and "-" characters in the path with "" and " ", respectively.
 * Reads a [GLResources GL Resource] from a specified string
 * Returns HTTP Responses:
|| || *Status* || *Type* || *Logged message* || *Return* ||
|| *Empty request body* || {{{400}}} || {{{text/plain}}} ||{{{"Unable to create [GL Resource] (400), request body was empty"}}}||{{{"Unable to create [GL Resource]"}}}||
|| *Successful POST* || {{{201}}} ||{{{text/plain}}}||{{{"Created (201) Location [ID]"}}}||{{{glResource.getGlstring();}}}||
|| *IO Exception* || {{{400}}} || {{{text/plain}}} ||{{{"Unable to create [GL Resource] (400), caught [exception]"}}}||{{{"Unable to create [GL Resource]"}}}||


===HTTP GET===
[GLResources GL Resource]-specific HTTP GET Routes:
{{{
get(new GetRoute<Locus>("/locus/:id") {
        @Override
        protected Locus findGlResource(final String id) {
            return idResolver.findLocus(id);
        }

        @Override
        protected void writeGlResource(final GlWriter glWriter, final Locus locus, final Writer writer) throws IOException {
            glWriter.writeLocus(locus, writer);
        }
    });
}}}

The abstract HTTP GET Route:
 * Replaces path substrings "/" and ":id" with "", and type substrings "/" "-" with "" and " ", respectively. 
 * Resolve the ID to a [GLResources GL Resource], if it exists
 * Write the specified [GLResources GL Resource] to the specified writer
 * Returns HTTP Responses:
|| || *Status* || *Type* || *Logged message* || *Return* ||
|| *Invalid ID* ||{{{404}}} ||{{{text/plain}}} ||{{{"Invalid identifier or file extension (404) [ID]"}}} ||{{{"Invalid identifier or file extension"}}} ||
|| *GL Resource not found*||{{{404}}} ||{{{text/plain}}} ||{{{"[GL Resource] not found [ID]"}}} ||{{{"[name] not found"}}} ||
|| *Successful GET of QR Code*||{{{307}}} ||Redirect: {{{"http://chart.apis.google.com/chart?cht=qr&chs=128x128&chld=L&choe=UTF-8&chl=" + encode(glResource.getId())}}} || ||{{{"Redirect"}}} ||
|| *Invalid file extension*|| {{{404}}}||{{{text/plain}}} ||{{{"Invalid file extension (404) [ID], [file extension]"}}} ||{{{"Invalid file extension"}}} ||
|| *Writer IO Exception* ||{{{500}}} ||{{{text/plain}}} ||{{{"Could not write [GL Resource] (500) [ID], caught [exception]"}}} ||{{{"Could not write [name]"}}} ||
|| *Successful GET* ||{{{200}}} ||{{{Content Type}}} (HTML, GL String, XML, RDF, etc.) ||{{{"OK (200) [ID]"}}} ||{{{stringwriter.toString();}}} ||
 

===Loading IMGT Alleles===
The GL Service is initially populated with all currently registered alleles in the [http://www.ebi.ac.uk/imgt/hla/ IMGT Database]. This occurs in the {{{init()}}} method of the Spark service as shown below. 

{{{
post(new Route("/load-imgt-alleles") {
        @Override
        public Object handle(final Request request, final Response response) {
            try {
                loadImgtAlleles();
                response.status(307);
                response.redirect(".");
                return "Redirect";
            }
            catch (IOException e) {
                response.status(400);
                response.type("text/plain");
                logger.warn("Failed to load IMGT alleles, caught {}", e.getMessage());
                return "Failed to load IMGT alleles";
            }
        }
    });
}}}

The method {{{loadImgtAlleles();}}}  parses the list of alleles found at ftp://ftp.ebi.ac.uk/pub/databases/imgt/mhc/hla/Allelelist.txt and calls {{{glReader.readAllele(glstring, accession);}}} from the GLReader on each, which posts the alleles to the service.