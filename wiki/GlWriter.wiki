#summary An overview of the GlWriter
#labels Phase-Implementation

= Introduction =

The GL Service utilizes the {{{GlWriter}}} to write GLResources to a specific format.

In brief, the GL Writer:
 * 

= Details =

==Components==
The following classes are _part_ of the GL Writer:
|| *Name* || *Function* ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service/src/main/java/org/immunogenomics/gl/service/GlWriter.java GlWriter.java] || Interface - Write a specified resource to a specified writer ||
|| [http://code.google.com/p/genotype-list/source/browse/trunk/gl-service/src/main/java/org/immunogenomics/gl/service/writer/AbstractTemplatedGlWriter.java AbstractTemplatedGlWriter.java]|| Abstract Templated Writer, implements GlWriter ||
|| [ GlstringGlWriter.java] || implements GlWriter ||
|| [ HtmlGlWriter.java] || extends [GlWriter#AbstractTemplatedGlWriter AbstractTemplatedGlWriter] ||
|| [ JsonGlWriter.java] || implements GlWriter ||
|| [ N3GlWriter.java] || extends [GlWriter#AbstractTemplatedGlWriter AbstractTemplatedGlWriter] ||
|| [ RdfGlWriter.java] || extends [GlWriter#AbstractTemplatedGlWriter AbstractTemplatedGlWriter] ||
|| [ XlinkXmlGlWriter.java] || extends [GlWriter#AbstractTemplatedGlWriter AbstractTemplatedGlWriter] ||
|| [ XmlGlWriter.java] || extends [GlWriter#AbstractTemplatedGlWriter AbstractTemplatedGlWriter] ||


The following classes are _referenced_ by the GL Writer:
|| *Name* || *Function* ||
|| TODO ||  ||

==How it Works==
===Structure===
The {{{{format}GlWriter}}} *extends* {{{AbstractTemplatedGlWriter}}}, which *implements* {{{GlWriter}}}.

{{{GlWriter}}} is an interface that declares required {{{getContentType()}}} and {{{writeXXX()}}} methods for use in every type of {{{GlWriter}}}. 

[GlWriter#AbstractTemplatedGlWriter AbstractTemplatedGlWriter] is an abstract class that defines {{{writeXXX(resource, writer)}}} methods for various GLResources and arbitrary writers. It also contains undefined templates representing the file format, to be defined by each specific writer.

The various format-specific {{{GlWriter}}}s provide templates to hold the actual written content. Some writers do not extend the Abstract Template, but rather define their own {{{writeXXX()}}} methods and implement the {{{GlWriter}}} directly.

===Initializing the Writer===
There are several different format-specific implementations of the {{{GlWriter}}}. 
When the SparkGlService is initialized, all types of the {{{GlWriter}}} are passed in via a map linking each file extension to each writer.

{{{
SparkGlService(@Namespace final String ns, final GlReader glReader, final IdResolver idResolver, final Map<String, GlWriter> glWriters)
}}} 

===Writing===
The GlWriter is typically called from [SparkGlService Spark] within HTTP GET operations. The writer converts the retrieved GL Resource to the desired file format, for output to the user. 

Spark calls {{{writeGlResource()}}} with the GL Resource and the writer, looking up the writer by file extension. The writer then inserts the information contained by the GL Resource into the template, and passes it back to spark, where it is output as a string in the header location. 

{{{
get(new GetRoute<Locus>("/locus/:id") {
        @Override
        protected Locus findGlResource(final String id) {
            return idResolver.findLocus(id);
        }

        @Override
        protected void writeGlResource(final GlWriter glWriter, final Locus locus, final Writer writer) throws IOException {
            glWriter.writeLocus(locus, writer);
        }
    });
}}}

==!AbstractTemplatedGlWriter==
The Abstract Templated GL Writer acts as a core for most of the various writers. It provides two main components: {{{writeXXX()}}} methods and undefined templates for each resource, to be determined by the requirements of each file format. 

Each resource type has its own write method, in the format {{{writeXXX(resource, writer)}}}. These methods write the various GLResources to the desired file format. 

The templates are used within the {{{writeXXX()}}} methods to produce content based on the file type. For example, the {{{XmlGlWriter}}} provides resource-specific templates that, when filled by the writer, validate to an XML Schema (gl-resource.xsd). 

The only classes that do not take advantage of the {{{AbstractTemplatedGlWriter}}} have implemented the {{{writeXXX()}}} separately for various reasons. 

Using Genotype as an example:
{{{
@Override
    public final void writeGenotype(final Genotype genotype, final Writer writer) throws IOException {
        checkNotNull(genotype);
        checkNotNull(writer);
        VelocityContext context = new VelocityContext();
        context.put("genotype", genotype);
        genotypeTemplate.merge(context, writer);
    }
}}}