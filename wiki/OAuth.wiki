#summary OAuth 2.0 support

= Introduction =

Basic functionality has been implemented for [http://tools.ietf.org/html/rfc6750 OAuth 2.0 Bearer Tokens]. 
(see [https://code.google.com/p/genotype-list/issues/detail?id=25 Issue:25])

= GL OAuth Resource Server Diagram =
http://genotype-list.googlecode.com/svn/wiki/images/sequence-diagrams/GL-OAuth-Resource-Server.png
gl-oauth-apache components are in green.
|| !ServletFilter || an application specific Filter that is responsible for initializing and configuring the OAuth components. ||
|| !ScopeEvaluator || responsible for determining the !RequestScope ||
|| !TokenValidator || responsible for providing the !AccessTokenDetails like the scope and the realm ||
|| Authorizer || responsible for determining if the !AccessTokenDetails have the rights to perform the !RequestScope ||
|| !AuthorizedHooks || hooks that allow an application to update the !ServletRequest or Thread with authorization information ||

= Details =
The *toy-portal* webapp acts as the authorization server, but it has no authentication support.  The users and scopes are configured in the userid-scopes.txt file like

{{{
id=john,realm=immunogenomics,duration=3600,scope=locus
id=adam,realm=immunogenomics,duration=3600,scope=load allele admin
id=eve,realm=immunogenomics,duration=3600,scope=other
id=john,realm=toy,duration=3600,scope=read
id=adam,realm=toy,duration=3600,scope=write read admin POST
id=eve,realm=toy,duration=3600,scope=none
}}}

= Testing =
To build and launch wars
{{{
## at trunk
mvn install 
mvn -pl gl-jetty jetty:run
}}}

Perform POST operations to interact with authorization server (toy-portal).
{{{
$ curl -d "" "http://localhost:10080/portal/oauth/get_token?userid=adam&realm=immunogenomics" ;echo
mgwed5jdy6h8
$ curl -d "" "http://localhost:10080/portal/oauth/validate?token=mgwed5jdy6h8" ;echo
expires_in=3522,id=adam,duration=3600,realm=immunogenomics,scope=load allele admin
}}}


Make sure reference data loaded (POST method is required)
{{{
$ curl -d "" "http://localhost:8080/gl/load" ;echo
}}}

Use Bearer token for secured operations
{{{
$ curl -v --header "content-type: text/plain" \
  --header "Authorization: Bearer mgwed5jdy6h8" \
  --data "HLA-DRB1*08:30:02~HLA-DRB3*02:02:01:01" \
  -X POST http://localhost:8080/gl/haplotype && echo
}}}

= OpenID =
The *openid-portal* webapp acts as the authorization server.  It uses OpenID for authentication and uses the `oauth-details.txt` in the user's home directory.

To use openid instead of the toy portal, within gl-jetty directory do
{{{
mvn jetty:run -Dportal=openid
}}}
http://localhost:10080/portal will ask you to sign in with a Yahoo or Google account.  Once signed, in you will have access to a GL Service menu item to get a new bearer token.

= Implementing an Authorization Server =
Some sample `OAuthProvider` implementations are available in the toy-portal project.

http://genotype-list.googlecode.com/svn/wiki/images/sequence-diagrams/OAuth%20Bearer%20Token%20Sequence%20Diagram.png

== Easy Steps ==
For authorization server
  # Add a dependency on gl-oauth-apache.jar
  # Implement an `OAuthProvider` -- Write the method `AuthorizationDetails getAuthorization(userid, realm)` to generate `AuthorizationDetail`s based on the user's groups or other security configuration.
  # Implement and configure handling for a "/validate" operation.
For resource server
  # Deploy the war generated by gl-service-webapp-custom/glsw-oauth
  # Configure it with your "/validate" operation.
For validate operation, either (a) use default JMX configuration and put wars on same server; or (b) configure the property "oauth.validate.url" with the url for your "/validate" operation.